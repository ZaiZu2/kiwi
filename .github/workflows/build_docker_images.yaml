name: Build Docker Images

# BUG: Does not trigger after `Lint code` workflow finishes
# on:
#   workflow_run:
#     workflows: [Lint code]
#     types: [completed]
#     branches: [main]
on:
  push:
    branches: [main]

jobs:
  on-success:
    runs-on: ubuntu-latest
    environment: Production
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: "./frontend/package-lock.json"

      - name: Install npm dependencies
        run: npm install --legacy-peer-deps
        working-directory: ./frontend

      - name: Build React app
        env:
          REACT_APP_BASE_API_URL: ${{ vars.REACT_APP_BASE_API_URL }}
          REACT_APP_WEBSOCKET_URL: ${{ vars.REACT_APP_WEBSOCKET_URL }}
        run: |
          echo "REACT_APP_BASE_API_URL=$REACT_APP_BASE_API_URL" > .env
          echo "REACT_APP_WEBSOCKET_URL=$REACT_APP_WEBSOCKET_URL" >> .env
          npm run build
        working-directory: ./frontend

      # Not needed
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ vars.AWS_ECR_ROLE }}
          aws-region: ${{ vars.AWS_ECR_REGION }}

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and push FE docker image to Amazon ECR Public
        env:
          REACT_APP_BASE_API_URL: ${{ vars.REACT_APP_BASE_API_URL }}
          REACT_APP_WEBSOCKET_URL: ${{ vars.REACT_APP_WEBSOCKET_URL }}
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: u9r6f9x0
          REPOSITORY: word_chain_game_nginx
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG -f ./frontend/Dockerfile .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker tag $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest

      - name: Build and push BE docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          REGISTRY_ALIAS: u9r6f9x0
          REPOSITORY: word_chain_game_backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG -f ./backend/Dockerfile .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
          docker tag $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:latest

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build FE image
      #   uses: docker/build-push-action@v5
      #   with:
      #     file: ./frontend/Dockerfile
      #     context: .
      #     push: true
      #     tags: zaizu2/word_chain_game_nginx:latest

      # - name: Build BE image
      #   uses: docker/build-push-action@v5
      #   with:
      #     file: ./backend/Dockerfile
      #     context: .
      #     push: true
      #     tags: zaizu2/word_chain_game_backend:latest

  # on-failure:
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.workflow_run.conclusion == 'failure' }}
  #   steps:
  #     - run: echo 'The triggering workflow failed'
